package com.jerry.moneyapp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jerry.moneyapp.bean.GLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GLOG".
*/
public class GLogDao extends AbstractDao<GLog, Void> {

    public static final String TABLENAME = "GLOG";

    /**
     * Properties of entity GLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Log = new Property(0, String.class, "log", false, "LOG");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Data = new Property(2, String.class, "data", false, "DATA");
        public final static Property Week = new Property(3, int.class, "week", false, "WEEK");
    }


    public GLogDao(DaoConfig config) {
        super(config);
    }
    
    public GLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GLOG\" (" + //
                "\"LOG\" TEXT," + // 0: log
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"DATA\" TEXT," + // 2: data
                "\"WEEK\" INTEGER NOT NULL );"); // 3: week
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GLOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GLog entity) {
        stmt.clearBindings();
 
        String log = entity.getLog();
        if (log != null) {
            stmt.bindString(1, log);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(3, data);
        }
        stmt.bindLong(4, entity.getWeek());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GLog entity) {
        stmt.clearBindings();
 
        String log = entity.getLog();
        if (log != null) {
            stmt.bindString(1, log);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(3, data);
        }
        stmt.bindLong(4, entity.getWeek());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GLog readEntity(Cursor cursor, int offset) {
        GLog entity = new GLog( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // log
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // data
            cursor.getInt(offset + 3) // week
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GLog entity, int offset) {
        entity.setLog(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWeek(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GLog entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GLog entity) {
        return null;
    }

    @Override
    public boolean hasKey(GLog entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
